/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/exhibitors": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** すべての参加団体を取得 */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Exhibition"][];
          };
        };
      };
    };
    put?: never;
    /** 参加団体を追加 */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewExhibition"];
        };
      };
      responses: {
        /** @description OK */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["NewExhibitionResponse"];
          };
        };
        /** @description 不正なrequest bodyの形式 */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description 参加団体またはユーザーがすでに存在する */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/exhibitors/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 参加団体を取得
     * @description ### authの違いによる挙動の違い
     *     - **exhibitor_bearerの場合**: 自分が属する参加団体のみ取得可能
     *     - **admin_oidcの場合**: 存在する全ての参加団体を取得可能
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description 参加団体id */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Exhibition"];
          };
        };
        /** @description 参加団体が存在しない */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * 参加団体を編集
     * @description ### authの違いによる挙動の違い
     *     - **exhibitor_bearerの場合**: 自分が属する参加団体のみ編集可能
     *     - **admin_oidcの場合**: 存在する全ての参加団体を編集可能
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description 参加団体id */
          id: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["EditExhibition"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description 参加団体が編集された */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description 不正なrequest bodyの形式 */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description 参加団体が存在しない */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/forms": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * アクセス可能なフォームをすべて取得
     * @description ### authの違いによる挙動の違い
     *     - **exhibitor_bearerの場合**: 自分が属する参加団体の属性に基づいてアクセス可能なフォームを取得
     *     - **admin_oidcの場合**: 存在するフォームを全て取得
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Form"][];
          };
        };
        /** @description 不正なrequest bodyの形式 */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description 資格情報が無効だった場合 */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** フォームを新規作成 */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Form"];
        };
      };
      responses: {
        /** @description Changed */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Form"];
          };
        };
        /** @description 不正なrequest bodyの形式 */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description 資格情報が無効だった場合 */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/forms/{form_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * フォームを取得
     * @description ### authの違いによる挙動の違い
     *     - **exhibitor_bearerの場合**: 自分が属する参加団体の属性に基づいてアクセス可能なフォームな場合取得
     *     - **admin_oidcの場合**: 存在するフォームを全て取得
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description フォームID */
          form_id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Form"];
          };
        };
        /** @description 不正なrequest bodyの形式 */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description 資格情報が無効だった場合 */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** フォームを更新 */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description フォームID */
          form_id: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Form"];
        };
      };
      responses: {
        /** @description Changed */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Form"][];
          };
        };
        /** @description 不正なrequest bodyの形式 */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description 資格情報が無効だった場合 */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /** フォームを削除 */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description フォームID */
          form_id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Changed */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Form"][];
          };
        };
        /** @description 資格情報が無効だった場合 */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description フォームが存在しない */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/forms/{form_id}/responses": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 閲覧可能なすべての回答を取得
     * @description ### authの違いによる挙動の違い
     *     - **exhibitor_bearerの場合**: 自分が属する参加団体の責任者が回答した回答を全て取得
     *     - **admin_oidcの場合**: 存在する全ての回答を取得
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description フォームID */
          form_id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK/ */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["FormResponse"][];
          };
        };
        /** @description 資格情報が無効だった場合 */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description フォームが存在しない */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** 新たに回答を作成 */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description フォームID */
          form_id: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["FormResponse"];
        };
      };
      responses: {
        /** @description Changed */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Form"][];
          };
        };
        /** @description 資格情報が無効だった場合 */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description フォームが存在しない */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/forms/{form_id}/responses/{response_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** 回答を編集 */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description フォームID */
          form_id: string;
          /** @description 回答ID */
          response_id: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["FormResponse"];
        };
      };
      responses: {
        /** @description OK/ */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["FormResponse"][];
          };
        };
        /** @description 資格情報が無効だった場合 */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description フォームまたは回答が存在しない */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /** 回答を削除 */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description フォームID */
          form_id: string;
          /** @description 回答ID */
          response_id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Changed. */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description 資格情報が無効だった場合 */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description フォームまたは回答が存在しない */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Exhibition: {
      /**
       * @description 参加団体id
       * @example T-001
       */
      id: string;
      /**
       * Format: date-time
       * @description 作成日時
       */
      created_at: string;
      /**
       * Format: date-time
       * @description 最終更新日時
       */
      updated_at: string;
      /**
       * @description 参加団体名
       * @example U7374
       */
      exhibitor_name: string;
      /**
       * @description 企画名
       * @example 釈迦釈迦ポテト
       */
      exhibition_name?: string | null;
      /** @description アイコンのid */
      icon_id?: string | null;
      /** @description 企画概要 */
      description?: string | null;
      /**
       * @description 参加団体の種類
       * @example general
       * @enum {string}
       */
      type: "booth" | "general" | "stage" | "labo";
      /** @description 第一責任者, 第二責任者, 第三責任者 */
      representatives: unknown;
    };
    User: {
      /**
       * Format: uuid
       * @description unique id
       */
      readonly id: string;
      /**
       * Format: date-time
       * @description 作成日時
       */
      readonly created_at: string;
      /**
       * Format: date-time
       * @description 最終更新日時
       */
      readonly updated_at: string;
      /**
       * @description 名
       * @example Paul
       */
      first_name: string;
      /**
       * @description 姓
       * @example Johnson
       */
      last_name: string;
      /**
       * @description mアドレス(新旧どちらも含む)
       * @example johnson.p.5703@m.isct.ac.jp
       */
      m_address: string;
    };
    NewExhibition: {
      /**
       * @description 参加団体id
       * @example T-001
       */
      id: string;
      /**
       * @description 参加団体名
       * @example 釈迦釈迦ポテト
       */
      exhibitor_name: string;
      /**
       * @description 参加団体の種類
       * @example general
       * @enum {string}
       */
      type: "booth" | "general" | "stage" | "labo";
      /** @description 第一責任者, 第二責任者, 第三責任者 */
      representatives: unknown;
    };
    NewExhibitionResponse: {
      /** @description 第一責任者, 第二責任者, 第三責任者のactivation token */
      activation_tokens: unknown;
    };
    EditExhibition: {
      /**
       * @description 企画名
       * @example 釈迦釈迦ポテト
       */
      exhibition_name?: string;
      /** @description アイコンのid */
      icon_id?: string;
      /** @description 企画概要 */
      description?: string;
    };
    /** @description フォームの一般情報 */
    Info: {
      /** @description 回答者に表示されるフォームのタイトル */
      title: string;
      /** @description 編集者に表示されるフォームのタイトル */
      document_title: string;
      /** @description フォームの説明 */
      description: string;
      /**
       * Format: datetime
       * @description フォームの回答期限
       */
      deadline?: string;
    };
    ItemGeneric: {
      /**
       * Format: uuid
       * @description アイテムのID
       */
      readonly item_id: string;
      /** @description 回答者に表示される項目のタイトル */
      title: string;
      /** @description 回答者に表示される項目の説明 */
      description: string;
    };
    QuestionGeneric: {
      /** @description 回答必須かどうか */
      required: boolean;
    };
    /** @description テキスト */
    QuestionText: {
      /** @description trueの場合複数行にわたるテキスト。falseの場合一行の回答。 */
      paragraph: boolean;
    };
    /** @description ラジオボタン */
    QuestionRadioButton: {
      /** @description 選択肢 */
      choices: string[];
    };
    /** @description チェックボックス */
    QuestionCheckBox: {
      /** @description 選択肢 */
      choices: string[];
    };
    /** @description フォームの質問 */
    Question: components["schemas"]["QuestionGeneric"] & {
      question_text?: components["schemas"]["QuestionText"];
      question_radio_button?: components["schemas"]["QuestionRadioButton"];
      question_check_box?: components["schemas"]["QuestionCheckBox"];
    };
    /** @description 一つの質問を含む項目 */
    ItemQuestion: {
      question: components["schemas"]["Question"];
    };
    /** @description 改ページ */
    ItemPageBreak: Record<string, never>;
    /** @description テキスト */
    ItemText: Record<string, never>;
    /** @description フォームの単一の項目 */
    Item: components["schemas"]["ItemGeneric"] & {
      item_question?: components["schemas"]["ItemQuestion"];
      item_page_break?: components["schemas"]["ItemPageBreak"];
      item_text?: components["schemas"]["ItemText"];
    };
    /** @description フォームのアクセス制限 */
    AccessControl: {
      /** @description アクセス可能なロール */
      roles: string[];
    };
    /** @description フォーム */
    Form: {
      /**
       * Format: uuid
       * @description フォームID
       */
      readonly form_id?: string;
      /**
       * Format: datetime
       * @description 作成日時
       */
      readonly created_at?: string;
      /**
       * Format: datetime
       * @description 更新日時
       */
      readonly updated_at?: string;
      info: components["schemas"]["Info"];
      /** @description フォームのアイテムのリスト（質問、改ページ、テキストなど） */
      items: components["schemas"]["Item"][];
      access_control: components["schemas"]["AccessControl"];
    };
    AnswerGeneric: {
      /**
       * Format: uuid
       * @description 項目のid
       */
      item_id: string;
    };
    /** @description 質問に対する回答をテキストで表したもの */
    AnswerText: {
      /** @description 回答の値
       *     質問の種類ごとの回答の形式:
       *     - Text: 回答者が入力したテキスト */
      value: string;
    };
    /** @description 質問に対する回答 */
    Answer: components["schemas"]["AnswerGeneric"] & {
      answer_text?: components["schemas"]["AnswerText"];
    };
    /** @description フォームの回答 */
    FormResponse: {
      /**
       * Format: uuid
       * @description 回答のID
       */
      readonly response_id?: string;
      /**
       * Format: datetime
       * @description 作成日時
       */
      readonly created_at?: string;
      /**
       * Format: datetime
       * @description 更新日時
       */
      readonly updated_at?: string;
      /**
       * Format: uuid
       * @description フォームのID
       */
      readonly form_id?: string;
      /**
       * Format: uuid
       * @description 回答者のID
       */
      readonly respondent_id?: string;
      /** @description 質問に対する回答(item_idをキーとする) */
      answers: {
        [key: string]: components["schemas"]["Answer"];
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;
export type operations = Record<string, never>;
